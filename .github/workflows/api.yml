name: api

on:
  push:
    branches: [ "main" ]
    paths:
      - 'api/**/*.py'
      - 'api/**/*.sh'
      - 'api/**/Dockerfile'
      - 'api/**/requirements.txt'
      - '**/api.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'api/**/*.py'
      - 'api/**/*.sh'
      - 'api/**/Dockerfile'
      - 'api/**/requirements.txt'
      - '**/api.yml'

permissions:
  contents: read
  packages: write

env:
  REGISTRY_IMAGE: "ghcr.io/ak7vv/hamframe-api"
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1
  IMAGE_TITLE: "Hamframe API"
  IMAGE_AUTHORS: "Christian Kuhtz <christian@kuhtz.com>"
  IMAGE_SOURCE: "http://github.com/ak7vv/hamframe"
  IMAGE_DESCRIPTION: "Hamframe API"
  IMAGE_LICENSES: MIT

jobs:
  containers:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    # Cancel in-progress jobs if matching component and platform when new PR arrives.
    concurrency:
      group: containers-api-${{ matrix.platform }}
      cancel-in-progress: true

    steps:
    - name: Create a variable with platform '${{ matrix.platform }}' value
      run: echo "PLATFORM=${{ matrix.platform }}" >> $GITHUB_ENV
    
    - name: Swap / for - in '${{ matrix.platform }}' and create local_platform variable
      id: local_platform
      run: |
        LOCAL_PLATFORM="${PLATFORM//\//-}"
        echo "LOCAL_PLATFORM=${LOCAL_PLATFORM}" >> $GITHUB_ENV
        echo "local_platform=${LOCAL_PLATFORM}" >> $GITHUB_STATE

    - name: checkout repo
      uses: actions/checkout@v4

    - name: setup docker buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      # with:
      #   buildkitd-flags: --debug

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.AUTOMATION }}

    # - name: Cache Docker layers
    #   id: cache-docker-layers
    #   uses: actions/cache@v4
    #   with:
    #     path: /tmp/.buildx-cache--${{ steps.local_platform.outputs.local_platform }}-api
    #     key: ${{ runner.os }}-buildx
    #     restore-keys: |
    #       ${{ runner.os }}-buildx

    - name: Set up QEMU
      if: matrix.platform == 'linux/arm64'
      uses: docker/setup-qemu-action@v3
      
    # - name: Build and push (ghcr.io/${{ github.repository_owner }}/hamframe-api:test)
    #   uses: docker/build-push-action@v6
    #   with:
    #     context: ./api
    #     load: true
    #     tags: ghcr.io/${{ github.repository_owner }}/hamframe-api:test
    #     platforms: ${{ matrix.platform }}
    #     cache-from: type=local,src=/tmp/.buildx-cache--${{ steps.local_platform.outputs.local_platform }}-api
    #     cache-to: type=local,mode=max,dest=/tmp/.buildx-cache--${{ steps.local_platform.outputs.local_platform }}-api

    # # FIXME: this needs to be more than a do we exit with code 0 test.. 
    # # https://github.com/ckuhtz/hamframe/issues/2
    # - name: Run tests in container (ghcr.io/${{ github.repository_owner }}/hamframe-api:test)
    #   run: docker run --rm --platform ${{ matrix.platform }} ghcr.io/${{ github.repository_owner }}/hamframe-api:test

    # - name: Build and push
    #   # if: success()
    #   uses: docker/build-push-action@v6
    #   with:
    #     context: ./api
    #     push: true
    #     tags: ghcr.io/${{ github.repository_owner }}/hamframe-api:latest
    #     platforms: ${{ matrix.platform }}
    #     cache-from: type=local,src=/tmp/.buildx-cache--${{ steps.local_platform.outputs.local_platform }}-api
    #     cache-to: type=local,mode=max,dest=/tmp/.buildx-cache--${{ steps.local_platform.outputs.local_platform }}-api


    - name: Docker Metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY_IMAGE }}

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v4
      with:
        context: ./api
        platforms: ${{ matrix.platform }}
        provenance: false
        push: true
        labels: ${{ steps.meta.output.labels }}
        # tags: ${{ env.REGISTRY_IMAGE }}:latest
        cache-from: type=gha,scope=${{ matrix.platform }}
        cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
        outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true,annotation.org.opencontainers.image.title=${{ env.IMAGE_TITLE }},annotation.org.opencontainers.image.authors=${{ env.IMAGE_AUTHORS }},annotation.org.opencontainers.image.source=${{ env.IMAGE_SOURCE }},annotation.org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }},annotation.org.opencontainers.image.licenses=${{ env.IMAGE_LICENSES }}